{"version":3,"sources":["util.js","components/Infobox.js","components/Map.js","components/Table.js","components/LineGraph.js","App.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","color","fillColor","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","Infobox","title","isRed","active","total","props","Card","onClick","CardContent","Typography","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0WAKMA,EAAkB,CACtBC,MAAO,CACLC,IAAK,UAGLC,WAAY,KAEdC,UAAW,CACTF,IAAK,UAGLC,WAAY,KAEdE,OAAQ,CACNH,IAAK,UAGLC,WAAY,MAKHG,EAAW,SAACC,GACvB,IAAMC,EAAU,YAAOD,GASvB,OAPAC,EAAWC,MAAK,SAACC,EAAGC,GAClB,OAAID,EAAET,MAAQU,EAAEV,OACN,EAED,KAGJO,GAGII,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MAGjCC,EAAgB,SAACT,GAAD,IAAOU,EAAP,uDAAiB,QAAjB,OAC3BV,EAAKW,KAAI,SAAAC,GAAO,OACd,cAACC,EAAA,EAAD,CACAC,OAAQ,CAACF,EAAQG,YAAYC,IAAKJ,EAAQG,YAAYE,MACtDC,YAAa,GACbC,MAAO1B,EAAgBiB,GAAWf,IAClCyB,UAAW3B,EAAgBiB,GAAWf,IACtC0B,OACEC,KAAKC,KAAKX,EAAQF,IAAcjB,EAAgBiB,GAAWd,WAN7D,SASE,cAAC4B,EAAA,EAAD,UACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKA,UAAU,YAAYC,MAAO,CAAEC,gBAAgB,OAAD,OAASf,EAAQG,YAAYa,KAA7B,QACnD,qBAAKH,UAAU,YAAf,SAA4Bb,EAAQA,UACpC,sBAAKa,UAAU,iBAAf,oBAAwClB,IAAQK,EAAQlB,OAAOc,OAAO,UACtE,sBAAKiB,UAAU,iBAAf,wBAA4ClB,IAAQK,EAAQf,WAAWW,OAAO,UAC9E,sBAAKiB,UAAU,cAAf,qBACWlB,IAAQK,EAAQd,QAAQU,OAAO,qB,qEC3CrCqB,MAff,YAAkE,IAAhDC,EAA+C,EAA/CA,MAAOpC,EAAwC,EAAxCA,MAAOqC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,MAAUC,EAAQ,iBAC/D,OACE,cAACC,EAAA,EAAD,CAAMC,QAASF,EAAME,QAASX,UAAS,kBAAaO,GAAU,oBAAvB,oBACnCD,GAAS,gBADb,SAEE,eAACM,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYb,UAAU,gBAAgBN,MAAM,gBAA5C,SAA6DW,IAC7D,oBAAIL,UAAS,yBAAoBM,GAAS,wBAA1C,SAAqErC,IACrE,eAAC4C,EAAA,EAAD,CAAYb,UAAU,gBAAgBN,MAAM,gBAA5C,UAA6Dc,EAA7D,kB,2BCSOM,MAff,YAAsD,IAAvCC,EAAsC,EAAtCA,UAAW9B,EAA2B,EAA3BA,UAAWI,EAAgB,EAAhBA,OAAQ2B,EAAQ,EAARA,KAC3C,OACE,qBAAKhB,UAAU,MAAf,SACE,eAAC,IAAD,CAAYX,OAAQA,EAAQ2B,KAAMA,EAAlC,UACA,cAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAEbnC,EAAc+B,EAAW9B,S,OCQnBmC,MAjBf,YAA6B,IAAbL,EAAY,EAAZA,UACd,OACE,mCACE,qBAAKf,UAAU,QAAf,SACCe,EAAU7B,KAAI,SAACC,GAAD,OACb,+BACE,6BAAKA,EAAQA,UACb,6BACE,iCAASL,IAAQK,EAAQlB,OAAOc,OAAO,sB,QCR7CsC,EAAU,CACdC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACL7B,OAAQ,IAGZ8B,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAazD,GAC5B,OAAOO,IAAQkD,EAAYC,OAAOlD,OAAO,WAI/CmD,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJtD,OAAQ,WACRuD,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTjB,SAAS,GAEXkB,MAAO,CAELC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAO9D,IAAQmD,GAAOlD,OAAO,YAQnC8D,EAAiB,SAACtE,EAAMU,GAC5B,IACI6D,EADAC,EAAY,GAEhB,IAAK,IAAIC,KAAQzE,EAAKN,MAAO,CAC3B,GAAI6E,EAAe,CACjB,IAAIG,EAAe,CACjBC,EAAGF,EACHG,EAAG5E,EAAKU,GAAW+D,GAAQF,GAE7BC,EAAUK,KAAKH,GAEjBH,EAAgBvE,EAAKU,GAAW+D,GAElC,OAAOD,GA2CMM,MAxCf,YAAmC,IAAdpE,EAAa,EAAbA,UACnB,EAAwBqE,mBAAS,IAAjC,mBAAO/E,EAAP,KAAagF,EAAb,KAmBA,OAjBAC,qBAAU,YACO,uCAAG,sBAAA9E,EAAA,sEACV+E,MAAM,8DACTC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACnF,GACL,IAAIwE,EAAYF,EAAetE,EAAMU,GACrCsE,EAAQR,GACRc,QAAQC,IAAIf,MARA,2CAAH,qDAafgB,KACC,CAAC9E,IAGF,+BACO,OAAJV,QAAI,IAAJA,OAAA,EAAAA,EAAMyF,QAAS,GACd,cAAC,OAAD,CACEzF,KAAM,CACJ0F,SAAU,CACR,CACEC,gBAAiB,yBACjBC,YAAa,UACb5F,KAAMA,KAIZ8C,QAASA,O,cC0BJ+C,MAhHf,WACE,MAAkCd,mBAAS,IAA3C,mBAAOvC,EAAP,KAAkBsD,EAAlB,KACA,EAA8Bf,mBAAS,CAAC,cAAxC,mBAAOnE,EAAP,KAAgBmF,EAAhB,KACA,EAAsChB,mBAAS,IAA/C,mBAAOhE,EAAP,KAAoBiF,EAApB,KACA,EAAkCjB,mBAAS,IAA3C,mBAAOkB,EAAP,KAAkBC,EAAlB,KACA,EAAkCnB,mBAAS,CAAE/D,IAAK,SAAUmF,KAAM,UAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BtB,mBAAS,GAAvC,mBAAOuB,EAAP,KAAgBC,EAAhB,KACA,EAAwCxB,mBAAS,IAAjD,mBAAOyB,EAAP,KAAqBC,EAArB,KACA,EAAkC1B,mBAAS,SAA3C,mBAAOrE,EAAP,KAAkBgG,EAAlB,KAEAzB,qBAAU,WACRC,MAAM,sCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACnF,GACLgG,EAAehG,QAEhB,IAEHiF,qBAAU,YACc,uCAAG,sBAAA9E,EAAA,sEACjB+E,MAAO,4CACZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACnF,GACL,IAAMwC,EAAYxC,EAAKW,KAAI,SAACC,GAAD,MACzB,CACE+F,KAAM/F,EAAQA,QACd8C,MAAO9C,EAAQG,YAAY6F,SAGzB3G,EAAaF,EAASC,GAC5BkG,EAAajG,GACbwG,EAAgBzG,GAChB8F,EAAatD,MAbQ,2CAAH,qDAgBtBqE,KACC,CAACrE,IAEJ,IAAMsE,EAAe,uCAAG,WAAOC,GAAP,iBAAA5G,EAAA,6DAChB6G,EAAcD,EAAME,OAAOvD,MACjCqC,EAAWiB,GAELrE,EAAsB,cAAhBqE,EAA8B,2CAA9B,mDAAuHA,GAJ7G,SAMhB9B,MAAMvC,GACXwC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAnF,GACJ+F,EAAWiB,GACXhB,EAAehG,GAEfqG,EAAa,CAACrG,EAAKe,YAAYC,IAAKhB,EAAKe,YAAYE,OACrDsF,EAAW,MAbS,2CAAH,sDAkBrB,OACE,sBAAK9E,UAAU,MAAf,UACE,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,aAAf,UACE,wDACA,cAACyF,EAAA,EAAD,CAAazF,UAAU,eAAvB,SACE,eAAC0F,EAAA,EAAD,CAAQC,QAAQ,WAAWC,SAAUP,EAAiBpD,MAAO9C,EAA7D,UACE,cAAC0G,EAAA,EAAD,CAAU5D,MAAM,YAAhB,uBACClB,EAAU7B,KAAI,SAACC,GAAD,OACb,cAAC0G,EAAA,EAAD,CAAU5D,MAAO9C,EAAQ8C,MAAzB,SAAiC9C,EAAQ+F,kBAMjD,sBAAKlF,UAAU,YAAf,UACE,cAAC,EAAD,CACEM,OAAK,EACLC,OAAsB,UAAdtB,EACR0B,QAAS,SAACmF,GAAD,OAAOb,EAAa,UAC7B5E,MAAM,oBACNpC,MAAOW,EAAgBU,EAAYyG,YACnCvF,MAAO1B,IAAQQ,EAAYrB,OAAOc,OAAO,UAE3C,cAAC,EAAD,CACEwB,OAAsB,cAAdtB,EACR0B,QAAS,SAACmF,GAAD,OAAOb,EAAa,cAC7B5E,MAAM,YACNpC,MAAOW,EAAgBU,EAAY0G,gBACnCxF,MAAO1B,IAAQQ,EAAYlB,WAAWW,OAAO,UAE/C,cAAC,EAAD,CACEuB,OAAK,EACLC,OAAsB,WAAdtB,EACR0B,QAAS,SAACmF,GAAD,OAAOb,EAAa,WAC7B5E,MAAM,SACNpC,MAAOW,EAAgBU,EAAY2G,aACnCzF,MAAO1B,IAAQQ,EAAYjB,QAAQU,OAAO,aAG9C,cAAC,EAAD,CAAKE,UAAWA,EAAW8B,UAAWgE,EAAc1F,OAAQsF,EAAW3D,KAAM6D,OAG/E,cAACnE,EAAA,EAAD,CAAMV,UAAU,YAAhB,SACE,eAACY,EAAA,EAAD,WACE,uDACA,cAAC,EAAD,CAAOG,UAAWyD,IAClB,qBAAIxE,UAAU,iBAAd,2BAA8Cf,KAC9C,cAAC,EAAD,CAAWe,UAAU,YAAYf,UAAWA,aC/GtDiH,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.91f109d5.chunk.js","sourcesContent":["import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    // rgb: \"rgb(204, 16, 52)\",\n    // half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 200,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    // rgb: \"rgb(125, 215, 29)\",\n    // half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 250,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    // rgb: \"rgb(251, 68, 67)\",\n    // half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 750,\n  },\n};\n\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  })\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n// Draw circles on map with interactive tooltip\nexport const showDataOnMap = (data, casesType='cases') => (\n  data.map(country => (\n    <Circle\n    center={[country.countryInfo.lat, country.countryInfo.long]}\n    fillOpacity={0.4}\n    color={casesTypeColors[casesType].hex}\n    fillColor={casesTypeColors[casesType].hex}\n    radius={\n      Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n    }\n    >\n      <Popup>\n      <div className=\"info-container\">\n          <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }}/>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n          <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n\n\n    </Circle>\n  ))\n)","import React from 'react'\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\nimport '../css/InfoBox.css'\n\nfunction Infobox({title, cases, isRed, active, total, ...props}) {\n  return (\n    <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} \n      ${isRed && \"infoBox--red\"}`}>\n      <CardContent>\n        <Typography className=\"infoBox-title\" color=\"textSecondary\">{title}</Typography>\n        <h2 className={`infoBox-cases ${!isRed && \"infoBox-cases--green\"}`}>{cases}</h2>\n        <Typography className=\"infoBox-total\" color=\"textSecondary\">{total} Total</Typography>\n        \n      </CardContent>\n      \n    </Card>\n  )\n}\n\nexport default Infobox\n","import React from 'react'\nimport '../css/Map.css'\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport { showDataOnMap } from '../util';\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n      <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n      \n    </div>\n  )\n}\n\nexport default Map\n","import React from 'react'\nimport numeral from \"numeral\";\nimport '../css/Table.css';\n\nfunction Table({countries}) {\n  return (\n    <>\n      <div className=\"table\">\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n    </>\n  )\n}\n\nexport default Table\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","\nimport { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent  } from '@material-ui/core';\nimport { sortData, prettyPrintStat } from './util'\nimport InfoBox from './components/Infobox'\nimport Map from './components/Map'\nimport numeral from \"numeral\";\nimport Table from './components/Table'\nimport LineGraph from './components/LineGraph';\nimport \"leaflet/dist/leaflet.css\"\nimport './css/App.css';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState([\"worldwide\"]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, []);\n  \n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n    getCountriesData();\n  }, [countries]);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/countries' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    })\n  }\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-left\">\n        <div className=\"app-header\">\n          <h1>COVID-19 DAILY TRACKER</h1>\n          <FormControl className=\"app-dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app-stats\">\n          <InfoBox \n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\" \n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={numeral(countryInfo.cases).format(\"0.0a\")}/>\n\n          <InfoBox \n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\" \n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={numeral(countryInfo.recovered).format(\"0.0a\")}/>\n          \n          <InfoBox \n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\" \n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={numeral(countryInfo.deaths).format(\"0.0a\")}/>\n        </div>\n\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n\n      <Card className=\"app-right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app-graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app-graph\" casesType={casesType}/>\n        </CardContent>          \n      </Card>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}